import os
import asyncio
import random
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from telethon import TelegramClient, events
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEEPINFRA_API_KEY = os.getenv("DEEPINFRA_API_KEY")

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
client = TelegramClient("bot_session", API_ID, API_HASH)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

selected_chats = set()  # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç
bot_running = False  # –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
user_data = {}  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∏–º—è, –∏–Ω—Ç–µ—Ä–µ—Å—ã)

# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å —á–∞—Ç—ã"))
menu.add(KeyboardButton("‚ñ∂ –°—Ç–∞—Ä—Ç"), KeyboardButton("‚èπ –°—Ç–æ–ø"))
menu.add(KeyboardButton("‚Ñπ –°—Ç–∞—Ç—É—Å"))

# üîπ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –ò–ò
def get_ai_response(user_id, prompt):
    user_name = user_data.get(user_id, "—Ç—ã")

    messages = [
        {"role": "system", "content": f"–¢—ã –¥–µ–≤—É—à–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –°–≤–µ—Ç–ª–∞–Ω–∞, —Ç–µ–±–µ 22 –≥–æ–¥–∞. –¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —Ñ–∞–º–∏–ª—å—è—Ä–Ω–∞—è. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –¥–∏–∞–ª–æ–≥, —à—É—Ç–∫–∏, —ç–º–æ—Ü–∏–∏, –Ω–æ –Ω–µ –ª—é–±–∏—à—å –∑–≤–æ–Ω–∫–∏."},
        {"role": "user", "content": f"–ü—Ä–∏–≤–µ—Ç, –°–≤–µ—Ç–ª–∞–Ω–∞. –ú–µ–Ω—è –∑–æ–≤—É—Ç {user_name}. –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º!"}
    ]
    
    messages.append({"role": "user", "content": prompt})

    url = "https://api.deepinfra.com/v1/openai/chat/completions"
    headers = {"Authorization": f"Bearer {DEEPINFRA_API_KEY}", "Content-Type": "application/json"}
    payload = {"model": "mistralai/Mistral-7B-Instruct-v0.1", "messages": messages, "max_tokens": 50}

    response = requests.post(url, json=payload, headers=headers)
    
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return random.choice([
            "–ß—Ç–æ-—Ç–æ —É –º–µ–Ω—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ª–∞–≥–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ? ü§î",
            "–û–π, —è —Å–µ–π—á–∞—Å –Ω–µ–º–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∞, –¥–∞–≤–∞–π —á—É—Ç—å –ø–æ–∑–∂–µ –ø–æ–≥–æ–≤–æ—Ä–∏–º!",
            "–ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â—ë —Ä–∞–∑ üòä",
            "–ú–æ–∂–µ—Ç, –æ–±—Å—É–¥–∏–º —ç—Ç–æ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç? –£ –º–µ–Ω—è —Ç—É—Ç –Ω–µ–±–æ–ª—å—à–∏–µ –¥–µ–ª–∞."
        ])

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –∑–≤–æ–Ω–∫–æ–≤
def check_call_block(message):
    bad_phrases = ["–ø–æ–∑–≤–æ–Ω–∏—Ç—å", "—Å–æ–∑–≤–æ–Ω", "–∑–≤–æ–Ω–æ–∫", "–ø–µ—Ä–µ–∑–≤–æ–Ω", "–≥–æ–ª–æ—Å–æ–º"]
    if any(phrase in message.lower() for phrase in bad_phrases):
        return random.choice([
            "–ú–Ω–µ —É–¥–æ–±–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è –≤ —á–∞—Ç–µ, —Ç–∞–∫ —è –º–æ–≥—É –ª—É—á—à–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª–∏. üòä",
            "–ù–µ –ª—é–±–ª—é —Å–æ–∑–≤–æ–Ω—ã, –≤ —á–∞—Ç–µ —É–¥–æ–±–Ω–µ–µ, –ø—Ä–∞–≤–¥–∞!",
            "–Ø –Ω–µ –æ—Å–æ–±–æ –ª—é–±–ª—é –≥–æ–≤–æ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–æ–º, –¥–∞–≤–∞–π –ª—É—á—à–µ —Ç—É—Ç!",
            "–ì–æ–ª–æ—Å–æ–º –Ω–µ –º–æ–≥—É, –¥–∞–≤–∞–π —Ç–µ–∫—Å—Ç–æ–º?"
        ])
    return None

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫. –í—ã–±–µ—Ä–∏, –≥–¥–µ –º–Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å:", reply_markup=menu)

# üîπ –í—ã–±–æ—Ä —á–∞—Ç–æ–≤
@dp.message(lambda message: message.text == "üìã –í—ã–±—Ä–∞—Ç—å —á–∞—Ç—ã")
async def select_chats(message: types.Message):
    dialogs = await client.get_dialogs()
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for dialog in dialogs[:10]:  
        keyboard.add(KeyboardButton(f"{dialog.name} (ID: {dialog.id})"))
    
    keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    await message.answer("–í—ã–±–µ—Ä–∏ —á–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —è –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å:", reply_markup=keyboard)

# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
@dp.message(lambda message: "(ID:" in message.text)
async def add_chat(message: types.Message):
    chat_id = int(message.text.split("(ID:")[1].split(")")[0])
    selected_chats.add(chat_id)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç: {message.text}", reply_markup=menu)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@dp.message(lambda message: message.text == "‚ñ∂ –°—Ç–∞—Ä—Ç")
async def start_bot(message: types.Message):
    global bot_running
    if not selected_chats:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã!")
        return
    bot_running = True
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", reply_markup=menu)

# üîπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
@dp.message(lambda message: message.text == "‚èπ –°—Ç–æ–ø")
async def stop_bot(message: types.Message):
    global bot_running
    bot_running = False
    await message.answer("‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=menu)

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
@dp.message(lambda message: message.text == "‚Ñπ –°—Ç–∞—Ç—É—Å")
async def check_status(message: types.Message):
    status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if bot_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    await message.answer(f"üìå –°—Ç–∞—Ç—É—Å: {status}\n\nüìã –ß–∞—Ç—ã: {len(selected_chats)}", reply_markup=menu)

# üîπ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
@client.on(events.NewMessage)
async def handle_message(event):
    global bot_running
    if not bot_running or event.chat_id not in selected_chats:
        return
    
    delay = random.randint(3, 7)
    await asyncio.sleep(delay)

    ai_reply = get_ai_response(event.sender_id, event.message.message)
    await event.respond(ai_reply)

# üîπ –ó–∞–ø—É—Å–∫
async def main():
    await client.start()
    dp.include_router(bot)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling()

with client:
    client.loop.run_until_complete(main())
