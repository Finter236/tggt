import os
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from telethon import TelegramClient, events
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
DEEPINFRA_API_KEY = os.getenv("DEEPINFRA_API_KEY")

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
client = TelegramClient("bot_session", API_ID, API_HASH)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

selected_chats = set()  # –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç
bot_running = False  # –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

# üîπ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å —á–∞—Ç—ã"))
menu.add(KeyboardButton("‚ñ∂ –°—Ç–∞—Ä—Ç"), KeyboardButton("‚èπ –°—Ç–æ–ø"))
menu.add(KeyboardButton("‚Ñπ –°—Ç–∞—Ç—É—Å"))

# üîπ –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
def get_ai_response(prompt):
    url = "https://api.deepinfra.com/v1/openai/chat/completions"
    headers = {"Authorization": f"Bearer {DEEPINFRA_API_KEY}", "Content-Type": "application/json"}
    payload = {"model": "mistralai/Mistral-7B-Instruct-v0.1", "messages": [{"role": "user", "content": prompt}], "max_tokens": 50}

    response = requests.post(url, json=payload, headers=headers)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ!"

# üîπ –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫. –í—ã–±–µ—Ä–∏, –≥–¥–µ –º–Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å:", reply_markup=menu)

# üîπ –í—ã–±–æ—Ä —á–∞—Ç–æ–≤
@dp.message_handler(lambda message: message.text == "üìã –í—ã–±—Ä–∞—Ç—å —á–∞—Ç—ã")
async def select_chats(message: types.Message):
    dialogs = await client.get_dialogs()
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for dialog in dialogs[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 10 —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        keyboard.add(KeyboardButton(f"{dialog.name} (ID: {dialog.id})"))
    
    keyboard.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
    await message.answer("–í—ã–±–µ—Ä–∏ —á–∞—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —è –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å:", reply_markup=keyboard)

# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
@dp.message_handler(lambda message: "(ID:" in message.text)
async def add_chat(message: types.Message):
    chat_id = int(message.text.split("(ID:")[1].split(")")[0])
    selected_chats.add(chat_id)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç: {message.text}", reply_markup=menu)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
@dp.message_handler(lambda message: message.text == "‚ñ∂ –°—Ç–∞—Ä—Ç")
async def start_bot(message: types.Message):
    global bot_running
    if not selected_chats:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç—ã!")
        return
    bot_running = True
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", reply_markup=menu)

# üîπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
@dp.message_handler(lambda message: message.text == "‚èπ –°—Ç–æ–ø")
async def stop_bot(message: types.Message):
    global bot_running
    bot_running = False
    await message.answer("‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=menu)

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
@dp.message_handler(lambda message: message.text == "‚Ñπ –°—Ç–∞—Ç—É—Å")
async def check_status(message: types.Message):
    status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if bot_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    await message.answer(f"üìå –°—Ç–∞—Ç—É—Å: {status}\n\nüìã –ß–∞—Ç—ã: {len(selected_chats)}", reply_markup=menu)

# üîπ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ (–µ—Å–ª–∏ –±–æ—Ç –≤–∫–ª—é—á—ë–Ω)
@client.on(events.NewMessage)
async def handle_message(event):
    global bot_running
    if not bot_running or event.chat_id not in selected_chats:
        return
    
    ai_reply = get_ai_response(event.message.message)
    await event.respond(ai_reply)

# üîπ –ó–∞–ø—É—Å–∫
async def main():
    await client.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling()

with client:
    client.loop.run_until_complete(main())
